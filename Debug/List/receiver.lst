
AVRASM ver. 2.1.30  C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm Sat Jul 15 11:18:30 2017

C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _T1=R4
                 	.DEF _T1_msb=R5
                 	.DEF _T2=R6
                 	.DEF _T2_msb=R7
                 	.DEF _sum=R8
                 	.DEF _sum_msb=R9
                 	.DEF _right=R10
                 	.DEF _right_msb=R11
                 	.DEF _left=R12
                 	.DEF _left_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003e 	JMP  __RESET
000002 940c 006b 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0001      	.DW  0x0001
                 
                 _0x0:
000034 6425
C:\Users\Inspiron 1545\Downloads\project 1 (2)\project 1\Debug\List\receiver.asm(1139): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x25,0x64,0x0
                 _0x2020003:
000036 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000037 0001      	.DW  0x01
000038 0002      	.DW  0x02
000039 0066      	.DW  __REG_BIT_VARS*2
                 
00003a 0002      	.DW  0x02
00003b 016a      	.DW  __base_y_G101
00003c 006c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00003d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003e 94f8      	CLI
00003f 27ee      	CLR  R30
000040 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000041 e0f1      	LDI  R31,1
000042 bffb      	OUT  GICR,R31
000043 bfeb      	OUT  GICR,R30
000044 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000045 e08d      	LDI  R24,(14-2)+1
000046 e0a2      	LDI  R26,2
000047 27bb      	CLR  R27
                 __CLEAR_REG:
000048 93ed      	ST   X+,R30
000049 958a      	DEC  R24
00004a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004e 93ed      	ST   X+,R30
00004f 9701      	SBIW R24,1
000050 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000051 e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000052 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000053 9185      	LPM  R24,Z+
000054 9195      	LPM  R25,Z+
000055 9700      	SBIW R24,0
000056 f061      	BREQ __GLOBAL_INI_END
000057 91a5      	LPM  R26,Z+
000058 91b5      	LPM  R27,Z+
000059 9005      	LPM  R0,Z+
00005a 9015      	LPM  R1,Z+
00005b 01bf      	MOVW R22,R30
00005c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005d 9005      	LPM  R0,Z+
00005e 920d      	ST   X+,R0
00005f 9701      	SBIW R24,1
000060 f7e1      	BRNE __GLOBAL_INI_LOOP
000061 01fb      	MOVW R30,R22
000062 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000063 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000064 bfed      	OUT  SPL,R30
000065 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000066 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000067 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000068 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000069 940c 0089 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;
                 ;bit num=1,edge=0;
                 ;int T1,T2,sum , right , left;
                 ;char ch[10];
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00006b 93ea      	ST   -Y,R30
00006c b7ef      	IN   R30,SREG
00006d 93ea      	ST   -Y,R30
                 ; 0000 000D     if(num){
00006e fe20      	SBRS R2,0
00006f c00f      	RJMP _0x3
                 ; 0000 000E         if(edge){
000070 fe21      	SBRS R2,1
000071 c004      	RJMP _0x4
                 ; 0000 000F             T2=TCNT0;
000072 b662      	IN   R6,50
000073 2477      	CLR  R7
                 ; 0000 0010             edge=0;
000074 94e8      	CLT
000075 c003      	RJMP _0xE
                 ; 0000 0011             num=0;
                 ; 0000 0012             MCUCR=0x03;
                 ; 0000 0013         }
                 ; 0000 0014         else{
                 _0x4:
                 ; 0000 0015             T1=TCNT0;
000076 b642      	IN   R4,50
000077 2455      	CLR  R5
                 ; 0000 0016             edge=1;
000078 9468      	SET
                 _0xE:
000079 f821      	BLD  R2,1
                 ; 0000 0017             num=0;
00007a 94e8      	CLT
00007b f820      	BLD  R2,0
                 ; 0000 0018             MCUCR=0x03;
00007c e0e3      	LDI  R30,LOW(3)
00007d bfe5      	OUT  0x35,R30
                 ; 0000 0019         }
                 ; 0000 001A     }
                 ; 0000 001B     else{
00007e c006      	RJMP _0x6
                 _0x3:
                 ; 0000 001C         TCNT0=0;
00007f e0e0      	LDI  R30,LOW(0)
000080 bfe2      	OUT  0x32,R30
                 ; 0000 001D         MCUCR=0x02;
000081 e0e2      	LDI  R30,LOW(2)
000082 bfe5      	OUT  0x35,R30
                 ; 0000 001E         num=1;
000083 9468      	SET
000084 f820      	BLD  R2,0
                 ; 0000 001F     }
                 _0x6:
                 ; 0000 0020 
                 ; 0000 0021 }
000085 91e9      	LD   R30,Y+
000086 bfef      	OUT  SREG,R30
000087 91e9      	LD   R30,Y+
000088 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0025 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0026 // Timer/Counter 0 initialization
                 ; 0000 0027 // Clock source: System Clock
                 ; 0000 0028 // Clock value: 125.000 kHz
                 ; 0000 0029 // Mode: Normal top=0xFF
                 ; 0000 002A // OC0 output: Disconnected
                 ; 0000 002B // Timer Period: 2.048 ms
                 ; 0000 002C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
000089 e0e2      	LDI  R30,LOW(2)
00008a bfe3      	OUT  0x33,R30
                 ; 0000 002D TCNT0=0x00;
00008b e0e0      	LDI  R30,LOW(0)
00008c bfe2      	OUT  0x32,R30
                 ; 0000 002E OCR0=0x00;
00008d bfec      	OUT  0x3C,R30
                 ; 0000 002F 
                 ; 0000 0030 // External Interrupt(s) initialization
                 ; 0000 0031 // INT0: On
                 ; 0000 0032 // INT0 Mode: Rising Edge
                 ; 0000 0033 // INT1: Off
                 ; 0000 0034 // INT2: Off
                 ; 0000 0035 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
00008e b7eb      	IN   R30,0x3B
00008f 64e0      	ORI  R30,0x40
000090 bfeb      	OUT  0x3B,R30
                 ; 0000 0036 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
000091 e0e2      	LDI  R30,LOW(2)
000092 bfe5      	OUT  0x35,R30
                 ; 0000 0037 MCUCSR=(0<<ISC2);
000093 e0e0      	LDI  R30,LOW(0)
000094 bfe4      	OUT  0x34,R30
                 ; 0000 0038 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000095 e4e0      	LDI  R30,LOW(64)
000096 bfea      	OUT  0x3A,R30
                 ; 0000 0039 
                 ; 0000 003A // Alphanumeric LCD initialization
                 ; 0000 003B // Connections are specified in the
                 ; 0000 003C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 003D // RS - PORTA Bit 0
                 ; 0000 003E // RD - PORTA Bit 1
                 ; 0000 003F // EN - PORTA Bit 2
                 ; 0000 0040 // D4 - PORTA Bit 3
                 ; 0000 0041 // D5 - PORTA Bit 4
                 ; 0000 0042 // D6 - PORTA Bit 5
                 ; 0000 0043 // D7 - PORTA Bit 6
                 ; 0000 0044 // Characters/line: 16
                 ; 0000 0045 lcd_init(16);
000097 e1a0      	LDI  R26,LOW(16)
000098 940e 02f0 	CALL _lcd_init
                 ; 0000 0046 
                 ; 0000 0047 // Global enable interrupts
                 ; 0000 0048 #asm("sei")
00009a 9478      	sei
                 ; 0000 0049 
                 ; 0000 004A while (1)
                 _0x7:
                 ; 0000 004B       {
                 ; 0000 004C 
                 ; 0000 004D         left = T1/15-1;
00009b 01d2      	MOVW R26,R4
00009c e0ef      	LDI  R30,LOW(15)
00009d e0f0      	LDI  R31,HIGH(15)
00009e 940e 03a3 	CALL __DIVW21
0000a0 9731      	SBIW R30,1
0000a1 016f      	MOVW R12,R30
                 ; 0000 004E         right = T2/15-2;
0000a2 01d3      	MOVW R26,R6
0000a3 e0ef      	LDI  R30,LOW(15)
0000a4 e0f0      	LDI  R31,HIGH(15)
0000a5 940e 03a3 	CALL __DIVW21
0000a7 9732      	SBIW R30,2
0000a8 015f      	MOVW R10,R30
                 ; 0000 004F         sum = (right<<4) + left;
0000a9 940e 0382 	CALL __LSLW4
0000ab 0dec      	ADD  R30,R12
0000ac 1dfd      	ADC  R31,R13
0000ad 014f      	MOVW R8,R30
                 ; 0000 0050         sum=(signed)sum;
0000ae 0144      	MOVW R8,R8
                 ; 0000 0051        if(sum<0){
0000af 2400      	CLR  R0
0000b0 1480      	CP   R8,R0
0000b1 0490      	CPC  R9,R0
0000b2 f45c      	BRGE _0xA
                 ; 0000 0052         if(sum==-1){
0000b3 efef      	LDI  R30,LOW(65535)
0000b4 efff      	LDI  R31,HIGH(65535)
0000b5 15e8      	CP   R30,R8
0000b6 05f9      	CPC  R31,R9
0000b7 f419      	BRNE _0xB
                 ; 0000 0053           sum=255;
0000b8 efef      	LDI  R30,LOW(255)
0000b9 e0f0      	LDI  R31,HIGH(255)
0000ba c002      	RJMP _0xF
                 ; 0000 0054         }else
                 _0xB:
                 ; 0000 0055           sum=sum+16;
0000bb 01f4      	MOVW R30,R8
0000bc 9670      	ADIW R30,16
                 _0xF:
0000bd 014f      	MOVW R8,R30
                 ; 0000 0056          }
                 ; 0000 0057         sum=(unsigned)sum;
                 _0xA:
0000be 0144      	MOVW R8,R8
                 ; 0000 0058         sprintf(ch,"%d",sum);
0000bf e6e0      	LDI  R30,LOW(_ch)
0000c0 e0f1      	LDI  R31,HIGH(_ch)
0000c1 93fa      	ST   -Y,R31
0000c2 93ea      	ST   -Y,R30
                +
0000c3 e6e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c5 93fa      	ST   -Y,R31
0000c6 93ea      	ST   -Y,R30
0000c7 01f4      	MOVW R30,R8
0000c8 940e 038b 	CALL __CWD1
0000ca 940e 03be 	CALL __PUTPARD1
0000cc e084      	LDI  R24,4
0000cd 940e 024c 	CALL _sprintf
0000cf 9628      	ADIW R28,8
                 ; 0000 0059         lcd_clear();
0000d0 940e 02b1 	CALL _lcd_clear
                 ; 0000 005A         lcd_puts(ch);
0000d2 e6a0      	LDI  R26,LOW(_ch)
0000d3 e0b1      	LDI  R27,HIGH(_ch)
0000d4 940e 02df 	CALL _lcd_puts
                 ; 0000 005B       }
0000d6 cfc4      	RJMP _0x7
                 ; 0000 005C }
                 _0xD:
0000d7 cfff      	RJMP _0xD
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000d8 93ba      	ST   -Y,R27
0000d9 93aa      	ST   -Y,R26
0000da 931a      	ST   -Y,R17
0000db 930a      	ST   -Y,R16
0000dc 81aa      	LDD  R26,Y+2
0000dd 81bb      	LDD  R27,Y+2+1
0000de 9612      	ADIW R26,2
0000df 940e 03b6 	CALL __GETW1P
0000e1 9730      	SBIW R30,0
0000e2 f159      	BREQ _0x2000010
0000e3 81aa      	LDD  R26,Y+2
0000e4 81bb      	LDD  R27,Y+2+1
0000e5 9614      	ADIW R26,4
0000e6 940e 03b6 	CALL __GETW1P
0000e8 018f      	MOVW R16,R30
0000e9 9730      	SBIW R30,0
0000ea f061      	BREQ _0x2000012
                +
0000eb 3002     +CPI R16 , LOW ( 2 )
0000ec e0e0     +LDI R30 , HIGH ( 2 )
0000ed 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000ee f098      	BRLO _0x2000013
0000ef 01f8      	MOVW R30,R16
0000f0 9731      	SBIW R30,1
0000f1 018f      	MOVW R16,R30
                +
0000f2 81aa     +LDD R26 , Y + 2
0000f3 81bb     +LDD R27 , Y + 2 + 1
0000f4 9614     +ADIW R26 , 4
0000f5 93ed     +ST X + , R30
0000f6 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0000f7 81aa      	LDD  R26,Y+2
0000f8 81bb      	LDD  R27,Y+2+1
0000f9 9612      	ADIW R26,2
0000fa 91ed      	LD   R30,X+
0000fb 91fd      	LD   R31,X+
0000fc 9631      	ADIW R30,1
0000fd 93fe      	ST   -X,R31
0000fe 93ee      	ST   -X,R30
0000ff 9731      	SBIW R30,1
000100 81ac      	LDD  R26,Y+4
000101 83a0      	STD  Z+0,R26
                 _0x2000013:
000102 81aa      	LDD  R26,Y+2
000103 81bb      	LDD  R27,Y+2+1
000104 940e 03b6 	CALL __GETW1P
000106 23ff      	TST  R31
000107 f02a      	BRMI _0x2000014
000108 91ed      	LD   R30,X+
000109 91fd      	LD   R31,X+
00010a 9631      	ADIW R30,1
00010b 93fe      	ST   -X,R31
00010c 93ee      	ST   -X,R30
                 _0x2000014:
00010d c006      	RJMP _0x2000015
                 _0x2000010:
00010e 81aa      	LDD  R26,Y+2
00010f 81bb      	LDD  R27,Y+2+1
000110 efef      	LDI  R30,LOW(65535)
000111 efff      	LDI  R31,HIGH(65535)
000112 93ed      	ST   X+,R30
000113 93fc      	ST   X,R31
                 _0x2000015:
000114 8119      	LDD  R17,Y+1
000115 8108      	LDD  R16,Y+0
000116 9625      	ADIW R28,5
000117 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000118 93ba      	ST   -Y,R27
000119 93aa      	ST   -Y,R26
00011a 9726      	SBIW R28,6
00011b 940e 03c3 	CALL __SAVELOCR6
00011d e010      	LDI  R17,0
00011e 85ac      	LDD  R26,Y+12
00011f 85bd      	LDD  R27,Y+12+1
000120 e0e0      	LDI  R30,LOW(0)
000121 e0f0      	LDI  R31,HIGH(0)
000122 93ed      	ST   X+,R30
000123 93fc      	ST   X,R31
                 _0x2000016:
000124 89ea      	LDD  R30,Y+18
000125 89fb      	LDD  R31,Y+18+1
000126 9631      	ADIW R30,1
000127 8bea      	STD  Y+18,R30
000128 8bfb      	STD  Y+18+1,R31
000129 9731      	SBIW R30,1
00012a 91e4      	LPM  R30,Z
00012b 2f2e      	MOV  R18,R30
00012c 30e0      	CPI  R30,0
00012d f409      	BRNE PC+2
00012e c115      	RJMP _0x2000018
00012f 2fe1      	MOV  R30,R17
000130 30e0      	CPI  R30,0
000131 f439      	BRNE _0x200001C
000132 3225      	CPI  R18,37
000133 f411      	BRNE _0x200001D
000134 e011      	LDI  R17,LOW(1)
000135 c002      	RJMP _0x200001E
                 _0x200001D:
000136 940e 0337 	CALL SUBOPT_0x0
                 _0x200001E:
000138 c10a      	RJMP _0x200001B
                 _0x200001C:
000139 30e1      	CPI  R30,LOW(0x1)
00013a f4a9      	BRNE _0x200001F
00013b 3225      	CPI  R18,37
00013c f419      	BRNE _0x2000020
00013d 940e 0337 	CALL SUBOPT_0x0
00013f c102      	RJMP _0x20000CC
                 _0x2000020:
000140 e012      	LDI  R17,LOW(2)
000141 e040      	LDI  R20,LOW(0)
000142 e000      	LDI  R16,LOW(0)
000143 322d      	CPI  R18,45
000144 f411      	BRNE _0x2000021
000145 e001      	LDI  R16,LOW(1)
000146 c0fc      	RJMP _0x200001B
                 _0x2000021:
000147 322b      	CPI  R18,43
000148 f411      	BRNE _0x2000022
000149 e24b      	LDI  R20,LOW(43)
00014a c0f8      	RJMP _0x200001B
                 _0x2000022:
00014b 3220      	CPI  R18,32
00014c f411      	BRNE _0x2000023
00014d e240      	LDI  R20,LOW(32)
00014e c0f4      	RJMP _0x200001B
                 _0x2000023:
00014f c002      	RJMP _0x2000024
                 _0x200001F:
000150 30e2      	CPI  R30,LOW(0x2)
000151 f439      	BRNE _0x2000025
                 _0x2000024:
000152 e050      	LDI  R21,LOW(0)
000153 e013      	LDI  R17,LOW(3)
000154 3320      	CPI  R18,48
000155 f411      	BRNE _0x2000026
000156 6800      	ORI  R16,LOW(128)
000157 c0eb      	RJMP _0x200001B
                 _0x2000026:
000158 c003      	RJMP _0x2000027
                 _0x2000025:
000159 30e3      	CPI  R30,LOW(0x3)
00015a f009      	BREQ PC+2
00015b c0e7      	RJMP _0x200001B
                 _0x2000027:
00015c 3320      	CPI  R18,48
00015d f010      	BRLO _0x200002A
00015e 332a      	CPI  R18,58
00015f f008      	BRLO _0x200002B
                 _0x200002A:
000160 c007      	RJMP _0x2000029
                 _0x200002B:
000161 e0aa      	LDI  R26,LOW(10)
000162 9f5a      	MUL  R21,R26
000163 2d50      	MOV  R21,R0
000164 2fe2      	MOV  R30,R18
000165 53e0      	SUBI R30,LOW(48)
000166 0f5e      	ADD  R21,R30
000167 c0db      	RJMP _0x200001B
                 _0x2000029:
000168 2fe2      	MOV  R30,R18
000169 36e3      	CPI  R30,LOW(0x63)
00016a f449      	BRNE _0x200002F
00016b 940e 033e 	CALL SUBOPT_0x1
00016d 89e8      	LDD  R30,Y+16
00016e 89f9      	LDD  R31,Y+16+1
00016f 81a4      	LDD  R26,Z+4
000170 93aa      	ST   -Y,R26
000171 940e 0344 	CALL SUBOPT_0x2
000173 c0ce      	RJMP _0x2000030
                 _0x200002F:
000174 37e3      	CPI  R30,LOW(0x73)
000175 f441      	BRNE _0x2000032
000176 940e 033e 	CALL SUBOPT_0x1
000178 940e 034a 	CALL SUBOPT_0x3
00017a 940e 031e 	CALL _strlen
00017c 2f1e      	MOV  R17,R30
00017d c00a      	RJMP _0x2000033
                 _0x2000032:
00017e 37e0      	CPI  R30,LOW(0x70)
00017f f461      	BRNE _0x2000035
000180 940e 033e 	CALL SUBOPT_0x1
000182 940e 034a 	CALL SUBOPT_0x3
000184 940e 032a 	CALL _strlenf
000186 2f1e      	MOV  R17,R30
000187 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000188 6002      	ORI  R16,LOW(2)
000189 770f      	ANDI R16,LOW(127)
00018a e030      	LDI  R19,LOW(0)
00018b c034      	RJMP _0x2000036
                 _0x2000035:
00018c 36e4      	CPI  R30,LOW(0x64)
00018d f011      	BREQ _0x2000039
00018e 36e9      	CPI  R30,LOW(0x69)
00018f f411      	BRNE _0x200003A
                 _0x2000039:
000190 6004      	ORI  R16,LOW(4)
000191 c002      	RJMP _0x200003B
                 _0x200003A:
000192 37e5      	CPI  R30,LOW(0x75)
000193 f431      	BRNE _0x200003C
                 _0x200003B:
000194 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000195 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000196 83ee      	STD  Y+6,R30
000197 83ff      	STD  Y+6+1,R31
000198 e015      	LDI  R17,LOW(5)
000199 c00c      	RJMP _0x200003D
                 _0x200003C:
00019a 35e8      	CPI  R30,LOW(0x58)
00019b f411      	BRNE _0x200003F
00019c 6008      	ORI  R16,LOW(8)
00019d c003      	RJMP _0x2000040
                 _0x200003F:
00019e 37e8      	CPI  R30,LOW(0x78)
00019f f009      	BREQ PC+2
0001a0 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001a1 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001a2 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001a3 83ee      	STD  Y+6,R30
0001a4 83ff      	STD  Y+6+1,R31
0001a5 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001a6 ff02      	SBRS R16,2
0001a7 c014      	RJMP _0x2000042
0001a8 940e 033e 	CALL SUBOPT_0x1
0001aa 940e 0354 	CALL SUBOPT_0x4
0001ac 85ab      	LDD  R26,Y+11
0001ad 23aa      	TST  R26
0001ae f43a      	BRPL _0x2000043
0001af 85ea      	LDD  R30,Y+10
0001b0 85fb      	LDD  R31,Y+10+1
0001b1 940e 037e 	CALL __ANEGW1
0001b3 87ea      	STD  Y+10,R30
0001b4 87fb      	STD  Y+10+1,R31
0001b5 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001b6 3040      	CPI  R20,0
0001b7 f011      	BREQ _0x2000044
0001b8 5f1f      	SUBI R17,-LOW(1)
0001b9 c001      	RJMP _0x2000045
                 _0x2000044:
0001ba 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001bb c004      	RJMP _0x2000046
                 _0x2000042:
0001bc 940e 033e 	CALL SUBOPT_0x1
0001be 940e 0354 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001c0 fd00      	SBRC R16,0
0001c1 c011      	RJMP _0x2000047
                 _0x2000048:
0001c2 1715      	CP   R17,R21
0001c3 f478      	BRSH _0x200004A
0001c4 ff07      	SBRS R16,7
0001c5 c008      	RJMP _0x200004B
0001c6 ff02      	SBRS R16,2
0001c7 c004      	RJMP _0x200004C
0001c8 7f0b      	ANDI R16,LOW(251)
0001c9 2f24      	MOV  R18,R20
0001ca 5011      	SUBI R17,LOW(1)
0001cb c001      	RJMP _0x200004D
                 _0x200004C:
0001cc e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001cd c001      	RJMP _0x200004E
                 _0x200004B:
0001ce e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001cf 940e 0337 	CALL SUBOPT_0x0
0001d1 5051      	SUBI R21,LOW(1)
0001d2 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001d3 2f31      	MOV  R19,R17
0001d4 ff01      	SBRS R16,1
0001d5 c017      	RJMP _0x200004F
                 _0x2000050:
0001d6 3030      	CPI  R19,0
0001d7 f0a1      	BREQ _0x2000052
0001d8 ff03      	SBRS R16,3
0001d9 c006      	RJMP _0x2000053
0001da 81ee      	LDD  R30,Y+6
0001db 81ff      	LDD  R31,Y+6+1
0001dc 9125      	LPM  R18,Z+
0001dd 83ee      	STD  Y+6,R30
0001de 83ff      	STD  Y+6+1,R31
0001df c005      	RJMP _0x2000054
                 _0x2000053:
0001e0 81ae      	LDD  R26,Y+6
0001e1 81bf      	LDD  R27,Y+6+1
0001e2 912d      	LD   R18,X+
0001e3 83ae      	STD  Y+6,R26
0001e4 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001e5 940e 0337 	CALL SUBOPT_0x0
0001e7 3050      	CPI  R21,0
0001e8 f009      	BREQ _0x2000055
0001e9 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001ea 5031      	SUBI R19,LOW(1)
0001eb cfea      	RJMP _0x2000050
                 _0x2000052:
0001ec c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001ed e320      	LDI  R18,LOW(48)
0001ee 81ee      	LDD  R30,Y+6
0001ef 81ff      	LDD  R31,Y+6+1
0001f0 940e 03ba 	CALL __GETW1PF
0001f2 87e8      	STD  Y+8,R30
0001f3 87f9      	STD  Y+8+1,R31
0001f4 81ee      	LDD  R30,Y+6
0001f5 81ff      	LDD  R31,Y+6+1
0001f6 9632      	ADIW R30,2
0001f7 83ee      	STD  Y+6,R30
0001f8 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001f9 85e8      	LDD  R30,Y+8
0001fa 85f9      	LDD  R31,Y+8+1
0001fb 85aa      	LDD  R26,Y+10
0001fc 85bb      	LDD  R27,Y+10+1
0001fd 17ae      	CP   R26,R30
0001fe 07bf      	CPC  R27,R31
0001ff f050      	BRLO _0x200005C
000200 5f2f      	SUBI R18,-LOW(1)
000201 85a8      	LDD  R26,Y+8
000202 85b9      	LDD  R27,Y+8+1
000203 85ea      	LDD  R30,Y+10
000204 85fb      	LDD  R31,Y+10+1
000205 1bea      	SUB  R30,R26
000206 0bfb      	SBC  R31,R27
000207 87ea      	STD  Y+10,R30
000208 87fb      	STD  Y+10+1,R31
000209 cfef      	RJMP _0x200005A
                 _0x200005C:
00020a 332a      	CPI  R18,58
00020b f028      	BRLO _0x200005D
00020c ff03      	SBRS R16,3
00020d c002      	RJMP _0x200005E
00020e 5f29      	SUBI R18,-LOW(7)
00020f c001      	RJMP _0x200005F
                 _0x200005E:
000210 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000211 fd04      	SBRC R16,4
000212 c01a      	RJMP _0x2000061
000213 3321      	CPI  R18,49
000214 f420      	BRSH _0x2000063
000215 85a8      	LDD  R26,Y+8
000216 85b9      	LDD  R27,Y+8+1
000217 9711      	SBIW R26,1
000218 f409      	BRNE _0x2000062
                 _0x2000063:
000219 c009      	RJMP _0x20000CD
                 _0x2000062:
00021a 1753      	CP   R21,R19
00021b f010      	BRLO _0x2000067
00021c ff00      	SBRS R16,0
00021d c001      	RJMP _0x2000068
                 _0x2000067:
00021e c013      	RJMP _0x2000066
                 _0x2000068:
00021f e220      	LDI  R18,LOW(32)
000220 ff07      	SBRS R16,7
000221 c00b      	RJMP _0x2000069
000222 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000223 6100      	ORI  R16,LOW(16)
000224 ff02      	SBRS R16,2
000225 c007      	RJMP _0x200006A
000226 7f0b      	ANDI R16,LOW(251)
000227 934a      	ST   -Y,R20
000228 940e 0344 	CALL SUBOPT_0x2
00022a 3050      	CPI  R21,0
00022b f009      	BREQ _0x200006B
00022c 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00022d 940e 0337 	CALL SUBOPT_0x0
00022f 3050      	CPI  R21,0
000230 f009      	BREQ _0x200006C
000231 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000232 5031      	SUBI R19,LOW(1)
000233 85a8      	LDD  R26,Y+8
000234 85b9      	LDD  R27,Y+8+1
000235 9712      	SBIW R26,2
000236 f008      	BRLO _0x2000059
000237 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000238 ff00      	SBRS R16,0
000239 c008      	RJMP _0x200006D
                 _0x200006E:
00023a 3050      	CPI  R21,0
00023b f031      	BREQ _0x2000070
00023c 5051      	SUBI R21,LOW(1)
00023d e2e0      	LDI  R30,LOW(32)
00023e 93ea      	ST   -Y,R30
00023f 940e 0344 	CALL SUBOPT_0x2
000241 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000242 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000243 cee0      	RJMP _0x2000016
                 _0x2000018:
000244 85ac      	LDD  R26,Y+12
000245 85bd      	LDD  R27,Y+12+1
000246 940e 03b6 	CALL __GETW1P
000248 940e 03ca 	CALL __LOADLOCR6
00024a 9664      	ADIW R28,20
00024b 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00024c 92ff      	PUSH R15
00024d 2ef8      	MOV  R15,R24
00024e 9726      	SBIW R28,6
00024f 940e 03c5 	CALL __SAVELOCR4
000251 940e 035c 	CALL SUBOPT_0x5
000253 9730      	SBIW R30,0
000254 f419      	BRNE _0x2000072
000255 efef      	LDI  R30,LOW(65535)
000256 efff      	LDI  R31,HIGH(65535)
000257 c023      	RJMP _0x2080002
                 _0x2000072:
000258 01de      	MOVW R26,R28
000259 9616      	ADIW R26,6
00025a 940e 037a 	CALL __ADDW2R15
00025c 018d      	MOVW R16,R26
00025d 940e 035c 	CALL SUBOPT_0x5
00025f 83ee      	STD  Y+6,R30
000260 83ff      	STD  Y+6+1,R31
000261 e0e0      	LDI  R30,LOW(0)
000262 87e8      	STD  Y+8,R30
000263 87e9      	STD  Y+8+1,R30
000264 01de      	MOVW R26,R28
000265 961a      	ADIW R26,10
000266 940e 037a 	CALL __ADDW2R15
000268 940e 03b6 	CALL __GETW1P
00026a 93fa      	ST   -Y,R31
00026b 93ea      	ST   -Y,R30
00026c 931a      	ST   -Y,R17
00026d 930a      	ST   -Y,R16
00026e ede8      	LDI  R30,LOW(_put_buff_G100)
00026f e0f0      	LDI  R31,HIGH(_put_buff_G100)
000270 93fa      	ST   -Y,R31
000271 93ea      	ST   -Y,R30
000272 01de      	MOVW R26,R28
000273 961a      	ADIW R26,10
000274 dea3      	RCALL __print_G100
000275 019f      	MOVW R18,R30
000276 81ae      	LDD  R26,Y+6
000277 81bf      	LDD  R27,Y+6+1
000278 e0e0      	LDI  R30,LOW(0)
000279 93ec      	ST   X,R30
00027a 01f9      	MOVW R30,R18
                 _0x2080002:
00027b 940e 03cc 	CALL __LOADLOCR4
00027d 962a      	ADIW R28,10
00027e 90ff      	POP  R15
00027f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000280 93aa      	ST   -Y,R26
000281 b3eb      	IN   R30,0x1B
000282 70ef      	ANDI R30,LOW(0xF)
000283 2fae      	MOV  R26,R30
000284 81e8      	LD   R30,Y
000285 7fe0      	ANDI R30,LOW(0xF0)
000286 2bea      	OR   R30,R26
000287 bbeb      	OUT  0x1B,R30
                +
000288 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000289 958a     +DEC R24
00028a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028b 9ada      	SBI  0x1B,2
                +
00028c e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028d 958a     +DEC R24
00028e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028f 98da      	CBI  0x1B,2
                +
000290 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000291 958a     +DEC R24
000292 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000293 c088      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000294 93aa      	ST   -Y,R26
000295 81a8      	LD   R26,Y
000296 dfe9      	RCALL __lcd_write_nibble_G101
000297 81e8          ld    r30,y
000298 95e2          swap  r30
000299 83e8          st    y,r30
00029a 81a8      	LD   R26,Y
00029b dfe4      	RCALL __lcd_write_nibble_G101
                +
00029c e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00029d 958a     +DEC R24
00029e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00029f c07c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002a0 93aa      	ST   -Y,R26
0002a1 81e8      	LD   R30,Y
0002a2 e0f0      	LDI  R31,0
0002a3 59e6      	SUBI R30,LOW(-__base_y_G101)
0002a4 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0002a5 81e0      	LD   R30,Z
0002a6 81a9      	LDD  R26,Y+1
0002a7 0fae      	ADD  R26,R30
0002a8 dfeb      	RCALL __lcd_write_data
0002a9 81e9      	LDD  R30,Y+1
0002aa 93e0 016e 	STS  __lcd_x,R30
0002ac 81e8      	LD   R30,Y
0002ad 93e0 016f 	STS  __lcd_y,R30
0002af 9622      	ADIW R28,2
0002b0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002b1 e0a2      	LDI  R26,LOW(2)
0002b2 940e 0363 	CALL SUBOPT_0x6
0002b4 e0ac      	LDI  R26,LOW(12)
0002b5 dfde      	RCALL __lcd_write_data
0002b6 e0a1      	LDI  R26,LOW(1)
0002b7 940e 0363 	CALL SUBOPT_0x6
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba 93e0 016f 	STS  __lcd_y,R30
0002bc 93e0 016e 	STS  __lcd_x,R30
0002be 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002bf 93aa      	ST   -Y,R26
0002c0 81a8      	LD   R26,Y
0002c1 30aa      	CPI  R26,LOW(0xA)
0002c2 f031      	BREQ _0x2020005
0002c3 91e0 0170 	LDS  R30,__lcd_maxx
0002c5 91a0 016e 	LDS  R26,__lcd_x
0002c7 17ae      	CP   R26,R30
0002c8 f060      	BRLO _0x2020004
                 _0x2020005:
0002c9 e0e0      	LDI  R30,LOW(0)
0002ca 93ea      	ST   -Y,R30
0002cb 91a0 016f 	LDS  R26,__lcd_y
0002cd 5faf      	SUBI R26,-LOW(1)
0002ce 93a0 016f 	STS  __lcd_y,R26
0002d0 dfcf      	RCALL _lcd_gotoxy
0002d1 81a8      	LD   R26,Y
0002d2 30aa      	CPI  R26,LOW(0xA)
0002d3 f409      	BRNE _0x2020007
0002d4 c047      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002d5 91e0 016e 	LDS  R30,__lcd_x
0002d7 5fef      	SUBI R30,-LOW(1)
0002d8 93e0 016e 	STS  __lcd_x,R30
0002da 9ad8      	SBI  0x1B,0
0002db 81a8      	LD   R26,Y
0002dc dfb7      	RCALL __lcd_write_data
0002dd 98d8      	CBI  0x1B,0
0002de c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002df 93ba      	ST   -Y,R27
0002e0 93aa      	ST   -Y,R26
0002e1 931a      	ST   -Y,R17
                 _0x2020008:
0002e2 81a9      	LDD  R26,Y+1
0002e3 81ba      	LDD  R27,Y+1+1
0002e4 91ed      	LD   R30,X+
0002e5 83a9      	STD  Y+1,R26
0002e6 83ba      	STD  Y+1+1,R27
0002e7 2f1e      	MOV  R17,R30
0002e8 30e0      	CPI  R30,0
0002e9 f019      	BREQ _0x202000A
0002ea 2fa1      	MOV  R26,R17
0002eb dfd3      	RCALL _lcd_putchar
0002ec cff5      	RJMP _0x2020008
                 _0x202000A:
0002ed 8118      	LDD  R17,Y+0
0002ee 9623      	ADIW R28,3
0002ef 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002f0 93aa      	ST   -Y,R26
0002f1 b3ea      	IN   R30,0x1A
0002f2 6fe0      	ORI  R30,LOW(0xF0)
0002f3 bbea      	OUT  0x1A,R30
0002f4 9ad2      	SBI  0x1A,2
0002f5 9ad0      	SBI  0x1A,0
0002f6 9ad1      	SBI  0x1A,1
0002f7 98da      	CBI  0x1B,2
0002f8 98d8      	CBI  0x1B,0
0002f9 98d9      	CBI  0x1B,1
0002fa 81e8      	LD   R30,Y
0002fb 93e0 0170 	STS  __lcd_maxx,R30
0002fd 58e0      	SUBI R30,-LOW(128)
                +
0002fe 93e0 016c+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000300 81e8      	LD   R30,Y
000301 54e0      	SUBI R30,-LOW(192)
                +
000302 93e0 016d+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000304 e1a4      	LDI  R26,LOW(20)
000305 e0b0      	LDI  R27,0
000306 940e 0370 	CALL _delay_ms
000308 940e 0369 	CALL SUBOPT_0x7
00030a 940e 0369 	CALL SUBOPT_0x7
00030c 940e 0369 	CALL SUBOPT_0x7
00030e e2a0      	LDI  R26,LOW(32)
00030f df70      	RCALL __lcd_write_nibble_G101
                +
000310 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000311 958a     +DEC R24
000312 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000313 e2a8      	LDI  R26,LOW(40)
000314 df7f      	RCALL __lcd_write_data
000315 e0a4      	LDI  R26,LOW(4)
000316 df7d      	RCALL __lcd_write_data
000317 e8a5      	LDI  R26,LOW(133)
000318 df7b      	RCALL __lcd_write_data
000319 e0a6      	LDI  R26,LOW(6)
00031a df79      	RCALL __lcd_write_data
00031b df95      	RCALL _lcd_clear
                 _0x2080001:
00031c 9621      	ADIW R28,1
00031d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00031e 93ba      	ST   -Y,R27
00031f 93aa      	ST   -Y,R26
000320 91a9          ld   r26,y+
000321 91b9          ld   r27,y+
000322 27ee          clr  r30
000323 27ff          clr  r31
                 strlen0:
000324 916d          ld   r22,x+
000325 2366          tst  r22
000326 f011          breq strlen1
000327 9631          adiw r30,1
000328 cffb          rjmp strlen0
                 strlen1:
000329 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00032a 93ba      	ST   -Y,R27
00032b 93aa      	ST   -Y,R26
00032c 27aa          clr  r26
00032d 27bb          clr  r27
00032e 91e9          ld   r30,y+
00032f 91f9          ld   r31,y+
                 strlenf0:
000330 9005      	lpm  r0,z+
000331 2000          tst  r0
000332 f011          breq strlenf1
000333 9611          adiw r26,1
000334 cffb          rjmp strlenf0
                 strlenf1:
000335 01fd          movw r30,r26
000336 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _ch:
000160           	.BYTE 0xA
                 __base_y_G101:
00016a           	.BYTE 0x4
                 __lcd_x:
00016e           	.BYTE 0x1
                 __lcd_y:
00016f           	.BYTE 0x1
                 __lcd_maxx:
000170           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
000337 932a      	ST   -Y,R18
000338 85ad      	LDD  R26,Y+13
000339 85be      	LDD  R27,Y+13+1
00033a 85ef      	LDD  R30,Y+15
00033b 89f8      	LDD  R31,Y+15+1
00033c 9509      	ICALL
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
00033e 89e8      	LDD  R30,Y+16
00033f 89f9      	LDD  R31,Y+16+1
000340 9734      	SBIW R30,4
000341 8be8      	STD  Y+16,R30
000342 8bf9      	STD  Y+16+1,R31
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000344 85ad      	LDD  R26,Y+13
000345 85be      	LDD  R27,Y+13+1
000346 85ef      	LDD  R30,Y+15
000347 89f8      	LDD  R31,Y+15+1
000348 9509      	ICALL
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00034a 89a8      	LDD  R26,Y+16
00034b 89b9      	LDD  R27,Y+16+1
00034c 9614      	ADIW R26,4
00034d 940e 03b6 	CALL __GETW1P
00034f 83ee      	STD  Y+6,R30
000350 83ff      	STD  Y+6+1,R31
000351 81ae      	LDD  R26,Y+6
000352 81bf      	LDD  R27,Y+6+1
000353 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000354 89a8      	LDD  R26,Y+16
000355 89b9      	LDD  R27,Y+16+1
000356 9614      	ADIW R26,4
000357 940e 03b6 	CALL __GETW1P
000359 87ea      	STD  Y+10,R30
00035a 87fb      	STD  Y+10+1,R31
00035b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00035c 01de      	MOVW R26,R28
00035d 961c      	ADIW R26,12
00035e 940e 037a 	CALL __ADDW2R15
000360 940e 03b6 	CALL __GETW1P
000362 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000363 940e 0294 	CALL __lcd_write_data
000365 e0a3      	LDI  R26,LOW(3)
000366 e0b0      	LDI  R27,0
000367 940c 0370 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000369 e3a0      	LDI  R26,LOW(48)
00036a 940e 0280 	CALL __lcd_write_nibble_G101
                +
00036c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00036d 958a     +DEC R24
00036e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00036f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000370 9610      	adiw r26,0
000371 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000372 ef8a     +LDI R24 , LOW ( 0xFA )
000373 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000374 9701     +SBIW R24 , 1
000375 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000376 95a8      	wdr
000377 9711      	sbiw r26,1
000378 f7c9      	brne __delay_ms0
                 __delay_ms1:
000379 9508      	ret
                 
                 __ADDW2R15:
00037a 2400      	CLR  R0
00037b 0daf      	ADD  R26,R15
00037c 1db0      	ADC  R27,R0
00037d 9508      	RET
                 
                 __ANEGW1:
00037e 95f1      	NEG  R31
00037f 95e1      	NEG  R30
000380 40f0      	SBCI R31,0
000381 9508      	RET
                 
                 __LSLW4:
000382 0fee      	LSL  R30
000383 1fff      	ROL  R31
                 __LSLW3:
000384 0fee      	LSL  R30
000385 1fff      	ROL  R31
                 __LSLW2:
000386 0fee      	LSL  R30
000387 1fff      	ROL  R31
000388 0fee      	LSL  R30
000389 1fff      	ROL  R31
00038a 9508      	RET
                 
                 __CWD1:
00038b 2f6f      	MOV  R22,R31
00038c 0f66      	ADD  R22,R22
00038d 0b66      	SBC  R22,R22
00038e 2f76      	MOV  R23,R22
00038f 9508      	RET
                 
                 __DIVW21U:
000390 2400      	CLR  R0
000391 2411      	CLR  R1
000392 e190      	LDI  R25,16
                 __DIVW21U1:
000393 0faa      	LSL  R26
000394 1fbb      	ROL  R27
000395 1c00      	ROL  R0
000396 1c11      	ROL  R1
000397 1a0e      	SUB  R0,R30
000398 0a1f      	SBC  R1,R31
000399 f418      	BRCC __DIVW21U2
00039a 0e0e      	ADD  R0,R30
00039b 1e1f      	ADC  R1,R31
00039c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00039d 60a1      	SBR  R26,1
                 __DIVW21U3:
00039e 959a      	DEC  R25
00039f f799      	BRNE __DIVW21U1
0003a0 01fd      	MOVW R30,R26
0003a1 01d0      	MOVW R26,R0
0003a2 9508      	RET
                 
                 __DIVW21:
0003a3 d004      	RCALL __CHKSIGNW
0003a4 dfeb      	RCALL __DIVW21U
0003a5 f40e      	BRTC __DIVW211
0003a6 dfd7      	RCALL __ANEGW1
                 __DIVW211:
0003a7 9508      	RET
                 
                 __CHKSIGNW:
0003a8 94e8      	CLT
0003a9 fff7      	SBRS R31,7
0003aa c002      	RJMP __CHKSW1
0003ab dfd2      	RCALL __ANEGW1
0003ac 9468      	SET
                 __CHKSW1:
0003ad ffb7      	SBRS R27,7
0003ae c006      	RJMP __CHKSW2
0003af 95a0      	COM  R26
0003b0 95b0      	COM  R27
0003b1 9611      	ADIW R26,1
0003b2 f800      	BLD  R0,0
0003b3 9403      	INC  R0
0003b4 fa00      	BST  R0,0
                 __CHKSW2:
0003b5 9508      	RET
                 
                 __GETW1P:
0003b6 91ed      	LD   R30,X+
0003b7 91fc      	LD   R31,X
0003b8 9711      	SBIW R26,1
0003b9 9508      	RET
                 
                 __GETW1PF:
0003ba 9005      	LPM  R0,Z+
0003bb 91f4      	LPM  R31,Z
0003bc 2de0      	MOV  R30,R0
0003bd 9508      	RET
                 
                 __PUTPARD1:
0003be 937a      	ST   -Y,R23
0003bf 936a      	ST   -Y,R22
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
0003c2 9508      	RET
                 
                 __SAVELOCR6:
0003c3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003c4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003c5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003c6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003c7 931a      	ST   -Y,R17
0003c8 930a      	ST   -Y,R16
0003c9 9508      	RET
                 
                 __LOADLOCR6:
0003ca 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003cb 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003cc 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003cd 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ce 8119      	LDD  R17,Y+1
0003cf 8108      	LD   R16,Y
0003d0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  22 r1 :   5 r2 :   5 r3 :   0 r4 :   2 r5 :   1 r6 :   2 r7 :   1 
r8 :  10 r9 :   2 r10:   1 r11:   0 r12:   2 r13:   1 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   5 r26: 108 r27:  40 r28:  14 r29:   1 r30: 202 r31:  71 
x  :  23 y  : 168 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  32 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  55 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   2 
cp    :   6 cpc   :   4 cpi   :  33 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   1 jmp   :  23 ld    :  28 ldd   :  75 ldi   :  98 
lds   :   4 lpm   :  14 lsl   :   5 lsr   :   0 mov   :  16 movw  :  26 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  19 pop   :   1 push  :   1 rcall :  18 ret   :  29 
reti  :   1 rjmp  :  67 rol   :   7 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   1 sbrc  :   2 
sbrs  :  14 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  60 std   :  31 sts   :   9 sub   :   2 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007a2   1914     40   1954   16384  11.9%
[.dseg] 0x000060 0x000171      0     17     17    1024   1.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
