;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <alcd.h>
;
;bit num=1,edge=0;
;int T1,T2,sum , right , left;
;char ch[10];
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 000C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000D     if(num){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000E         if(edge){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000F             T2=TCNT0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0010             edge=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0011             num=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0012             MCUCR=0x03;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0013         }
; 0000 0014         else{
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0015             T1=TCNT0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0016             edge=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0017             num=0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0018             MCUCR=0x03;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0019         }
;PCODE: $0000002D VOL: 0
; 0000 001A     }
; 0000 001B     else{
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001C         TCNT0=0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001D         MCUCR=0x02;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001E         num=1;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001F     }
;PCODE: $00000037 VOL: 0
; 0000 0020 
; 0000 0021 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;
;void main(void)
; 0000 0025 {
;PCODE: $0000003B VOL: 0
; 0000 0026 // Timer/Counter 0 initialization
; 0000 0027 // Clock source: System Clock
; 0000 0028 // Clock value: 125.000 kHz
; 0000 0029 // Mode: Normal top=0xFF
; 0000 002A // OC0 output: Disconnected
; 0000 002B // Timer Period: 2.048 ms
; 0000 002C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002D TCNT0=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002E OCR0=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002F 
; 0000 0030 // External Interrupt(s) initialization
; 0000 0031 // INT0: On
; 0000 0032 // INT0 Mode: Rising Edge
; 0000 0033 // INT1: Off
; 0000 0034 // INT2: Off
; 0000 0035 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0036 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0037 MCUCSR=(0<<ISC2);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0038 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0039 
; 0000 003A // Alphanumeric LCD initialization
; 0000 003B // Connections are specified in the
; 0000 003C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 003D // RS - PORTA Bit 0
; 0000 003E // RD - PORTA Bit 1
; 0000 003F // EN - PORTA Bit 2
; 0000 0040 // D4 - PORTA Bit 3
; 0000 0041 // D5 - PORTA Bit 4
; 0000 0042 // D6 - PORTA Bit 5
; 0000 0043 // D7 - PORTA Bit 6
; 0000 0044 // Characters/line: 16
; 0000 0045 lcd_init(16);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0046 
; 0000 0047 // Global enable interrupts
; 0000 0048 #asm("sei")
;PCODE: $0000004D VOL: 0
	sei
;PCODE: $0000004E VOL: 0
; 0000 0049 
; 0000 004A while (1)
;PCODE: $0000004F VOL: 0
; 0000 004B       {
; 0000 004C 
; 0000 004D         left = T1/15-1;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004E         right = T2/15-2;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004F         sum = (right<<4) + left;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0050         sum=(signed)sum;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0051        if(sum<0){
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0052         if(sum==-1){
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0053           sum=255;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0054         }else
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0055           sum=sum+16;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0056          }
;PCODE: $0000006C VOL: 0
; 0000 0057         sum=(unsigned)sum;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0058         sprintf(ch,"%d",sum);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0059         lcd_clear();
;PCODE: $0000007C VOL: 0
; 0000 005A         lcd_puts(ch);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005B       }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005C }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
